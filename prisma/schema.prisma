// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// RBAC Models
model Group {
  id          String        @id @default(cuid())
  azureId     String        @unique // Azure AD Group ID
  displayName String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  roles       GroupRole[]
  
  @@map("groups")
}

model Role {
  id          String      @id @default(cuid())
  name        String      @unique // e.g., "dashboard", "inspections"
  displayName String      // e.g., "Dashboard", "Inspections"
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  groups      GroupRole[]
  
  @@map("roles")
}

model GroupRole {
  id        String   @id @default(cuid())
  groupId   String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role  Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, roleId])
  @@map("group_roles")
}

// Vault Models - Password Management
model VaultFolder {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3b82f6")
  icon        String   @default("folder")
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String   // User email
  
  // Self-referential relationship for nested folders
  parent   VaultFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children VaultFolder[] @relation("FolderHierarchy")
  
  // Related passwords
  passwords PasswordEntry[]
  
  // Sharing
  shares VaultFolderShare[]
  
  @@map("vault_folders")
}

model PasswordEntry {
  id              String   @id @default(cuid())
  title           String
  username        String
  encryptedPassword String  // Encrypted password - never store plain text
  url             String?
  notes           String?
  category        String
  tags            String   // JSON array as string
  isFavorite      Boolean  @default(false)
  
  // Folder relationship
  folderId        String?
  folder          VaultFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String   // User email
  lastAccessedAt  DateTime?
  
  // Sharing
  shares          PasswordShare[]
  
  // Audit
  accessLogs      VaultAccessLog[]
  
  @@map("password_entries")
}

model VaultFolderShare {
  id        String   @id @default(cuid())
  folderId  String
  sharedWith String  // User email
  sharedBy   String  // User email
  canView    Boolean @default(true)
  canEdit    Boolean @default(false)
  canDelete  Boolean @default(false)
  canShare   Boolean @default(false)
  canAddPasswords Boolean @default(false)
  sharedAt   DateTime @default(now())
  expiresAt  DateTime?
  
  folder VaultFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  
  @@unique([folderId, sharedWith])
  @@map("vault_folder_shares")
}

model PasswordShare {
  id         String   @id @default(cuid())
  passwordId String
  sharedWith String   // User email
  sharedBy   String   // User email
  canView    Boolean  @default(true)
  canEdit    Boolean  @default(false)
  canShare   Boolean  @default(false)
  sharedAt   DateTime @default(now())
  expiresAt  DateTime?
  
  password PasswordEntry @relation(fields: [passwordId], references: [id], onDelete: Cascade)
  
  @@unique([passwordId, sharedWith])
  @@map("password_shares")
}

model VaultAccessLog {
  id         String   @id @default(cuid())
  passwordId String
  userId     String   // User email
  action     String   // VIEW, EDIT, COPY, DELETE, SHARE
  ipAddress  String?
  userAgent  String?
  accessedAt DateTime @default(now())
  success    Boolean  @default(true)
  details    String?  // Additional context
  
  password PasswordEntry @relation(fields: [passwordId], references: [id], onDelete: Cascade)
  
  @@index([passwordId])
  @@index([userId])
  @@index([accessedAt])
  @@map("vault_access_logs")
}
